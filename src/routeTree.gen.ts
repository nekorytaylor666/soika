/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VerifyOtpImport } from './routes/verifyOtp'
import { Route as TestImport } from './routes/test'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as DashboardDealIdImport } from './routes/dashboard/$dealId'
import { Route as DashboardLotsRouteImport } from './routes/dashboard/lots/route'
import { Route as DashboardProductsTenderIdImport } from './routes/dashboard/products/$tenderId'
import { Route as DashboardLotsTestImport } from './routes/dashboard/lots/test'
import { Route as DashboardFeedBoardIdImport } from './routes/dashboard/feed/$boardId'
import { Route as DashboardCandidateTenderIdCandidateIdImport } from './routes/dashboard/candidate/$tenderId.$candidateId'

// Create Virtual Routes

const KanbanLazyImport = createFileRoute('/kanban')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const KanbanLazyRoute = KanbanLazyImport.update({
  path: '/kanban',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/kanban.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const VerifyOtpRoute = VerifyOtpImport.update({
  path: '/verifyOtp',
  getParentRoute: () => rootRoute,
} as any)

const TestRoute = TestImport.update({
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DashboardDealIdRoute = DashboardDealIdImport.update({
  path: '/$dealId',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardLotsRouteRoute = DashboardLotsRouteImport.update({
  path: '/lots',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardProductsTenderIdRoute = DashboardProductsTenderIdImport.update({
  path: '/products/$tenderId',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardLotsTestRoute = DashboardLotsTestImport.update({
  path: '/test',
  getParentRoute: () => DashboardLotsRouteRoute,
} as any)

const DashboardFeedBoardIdRoute = DashboardFeedBoardIdImport.update({
  path: '/feed/$boardId',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardCandidateTenderIdCandidateIdRoute =
  DashboardCandidateTenderIdCandidateIdImport.update({
    path: '/candidate/$tenderId/$candidateId',
    getParentRoute: () => DashboardRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/verifyOtp': {
      id: '/verifyOtp'
      path: '/verifyOtp'
      fullPath: '/verifyOtp'
      preLoaderRoute: typeof VerifyOtpImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/kanban': {
      id: '/kanban'
      path: '/kanban'
      fullPath: '/kanban'
      preLoaderRoute: typeof KanbanLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/lots': {
      id: '/dashboard/lots'
      path: '/lots'
      fullPath: '/dashboard/lots'
      preLoaderRoute: typeof DashboardLotsRouteImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/$dealId': {
      id: '/dashboard/$dealId'
      path: '/$dealId'
      fullPath: '/dashboard/$dealId'
      preLoaderRoute: typeof DashboardDealIdImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/feed/$boardId': {
      id: '/dashboard/feed/$boardId'
      path: '/feed/$boardId'
      fullPath: '/dashboard/feed/$boardId'
      preLoaderRoute: typeof DashboardFeedBoardIdImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/lots/test': {
      id: '/dashboard/lots/test'
      path: '/test'
      fullPath: '/dashboard/lots/test'
      preLoaderRoute: typeof DashboardLotsTestImport
      parentRoute: typeof DashboardLotsRouteImport
    }
    '/dashboard/products/$tenderId': {
      id: '/dashboard/products/$tenderId'
      path: '/products/$tenderId'
      fullPath: '/dashboard/products/$tenderId'
      preLoaderRoute: typeof DashboardProductsTenderIdImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/candidate/$tenderId/$candidateId': {
      id: '/dashboard/candidate/$tenderId/$candidateId'
      path: '/candidate/$tenderId/$candidateId'
      fullPath: '/dashboard/candidate/$tenderId/$candidateId'
      preLoaderRoute: typeof DashboardCandidateTenderIdCandidateIdImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  DashboardRouteRoute: DashboardRouteRoute.addChildren({
    DashboardLotsRouteRoute: DashboardLotsRouteRoute.addChildren({
      DashboardLotsTestRoute,
    }),
    DashboardDealIdRoute,
    DashboardFeedBoardIdRoute,
    DashboardProductsTenderIdRoute,
    DashboardCandidateTenderIdCandidateIdRoute,
  }),
  LoginRoute,
  TestRoute,
  VerifyOtpRoute,
  AboutLazyRoute,
  KanbanLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/login",
        "/test",
        "/verifyOtp",
        "/about",
        "/kanban"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/lots",
        "/dashboard/$dealId",
        "/dashboard/feed/$boardId",
        "/dashboard/products/$tenderId",
        "/dashboard/candidate/$tenderId/$candidateId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/verifyOtp": {
      "filePath": "verifyOtp.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/kanban": {
      "filePath": "kanban.lazy.tsx"
    },
    "/dashboard/lots": {
      "filePath": "dashboard/lots/route.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/lots/test"
      ]
    },
    "/dashboard/$dealId": {
      "filePath": "dashboard/$dealId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/feed/$boardId": {
      "filePath": "dashboard/feed/$boardId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/lots/test": {
      "filePath": "dashboard/lots/test.tsx",
      "parent": "/dashboard/lots"
    },
    "/dashboard/products/$tenderId": {
      "filePath": "dashboard/products/$tenderId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/candidate/$tenderId/$candidateId": {
      "filePath": "dashboard/candidate/$tenderId.$candidateId.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
